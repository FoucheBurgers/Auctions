@model Auctions.Models.ChangePasswordViewModel
@{
    ViewBag.Title = "Change Password";
}

<h2>@ViewBag.Title.</h2>
<body>

    @using (Html.BeginForm("ChangePassword", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <h4>Change Password Form</h4>
        <hr />
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(m => m.OldPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.OldPassword, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.NewPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.NewPassword, new { @class = "form-control" })
                <p>Minimum 6 characters, both UPPER and lower case letters, some special characters (eg. !*#%) and some numbers ('0'-'9')</p>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(m => m.PIN, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.PIN, new { @class = "form-control" })
                <span style="color: #F4080C">@Html.ValidationMessageFor(m => m.PIN)</span>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPIN, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPIN, new { @class = "form-control" })
                <span style="color: #F4080C">@Html.ValidationMessageFor(m => m.ConfirmPIN)</span>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.TermsAndConditions, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @*<div class="checkbox">*@
                @Html.CheckBoxFor(x => x.TermsAndConditions)
                <span style="color: #F4080C">@Html.ValidationMessageFor(x => x.TermsAndConditions)</span>
                @Html.Raw(TempData["msg"])
                <p>
                    <a href="@Url.Content("~/Documents/TCS.pdf")" target="_blank">Read Terms and Conditions?</a>
                </p>
                @*</div>*@
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Change password" class="btn btn-default" />
            </div>
        </div>
    }
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.js"></script>
    <script src="//ajax.aspnetcdn.com/ajax/jquery.validate/1.13.1/jquery.validate.js"></script>
    <script src="//ajax.aspnetcdn.com/ajax/mvc/5.2.3/jquery.validate.unobtrusive.js"></script>

    <script>
        // extend jquery range validator to work for required checkboxes
        var defaultRangeValidator = $.validator.methods.range;
        $.validator.methods.range = function (value, element, param) {
            if (element.type === 'checkbox') {
                // if it's a checkbox return true if it is checked
                return element.checked;
            } else {
                // otherwise run the default validation function
                return defaultRangeValidator.call(this, value, element, param);
            }
        }
    </script>
</body>

