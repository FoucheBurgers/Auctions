//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Auctions.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AuctionDBEntities : DbContext
    {
        public AuctionDBEntities()
            : base("name=AuctionDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ltRollDescription> ltRollDescriptions { get; set; }
        public virtual DbSet<ltSpecy> ltSpecies { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<tblCustomer> tblCustomers { get; set; }
        public virtual DbSet<tblRoll> tblRolls { get; set; }
        public virtual DbSet<BidHistory> BidHistories { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateBidder(Nullable<int> iD, Nullable<int> buyerId, Nullable<decimal> biddingPrice, Nullable<decimal> bidTotalPrice, Nullable<System.DateTime> dateTimeBid)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var buyerIdParameter = buyerId.HasValue ?
                new ObjectParameter("BuyerId", buyerId) :
                new ObjectParameter("BuyerId", typeof(int));
    
            var biddingPriceParameter = biddingPrice.HasValue ?
                new ObjectParameter("BiddingPrice", biddingPrice) :
                new ObjectParameter("BiddingPrice", typeof(decimal));
    
            var bidTotalPriceParameter = bidTotalPrice.HasValue ?
                new ObjectParameter("BidTotalPrice", bidTotalPrice) :
                new ObjectParameter("BidTotalPrice", typeof(decimal));
    
            var dateTimeBidParameter = dateTimeBid.HasValue ?
                new ObjectParameter("DateTimeBid", dateTimeBid) :
                new ObjectParameter("DateTimeBid", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBidder", iDParameter, buyerIdParameter, biddingPriceParameter, bidTotalPriceParameter, dateTimeBidParameter);
        }
    
        public virtual int UpdateRoll(Nullable<int> iD, string roleID, string lot, string item, string tagNr, string age, string dateMeasured, string hornLength, string tipToTip, string otherInfo, string dateAvailable, Nullable<int> male, Nullable<int> female, Nullable<int> young, Nullable<float> quantity, string quantity_Lot, string seller, string bidder, Nullable<float> biddingPrice, Nullable<System.DateTime> bidDateTime, Nullable<float> bidTotalPrice, Nullable<float> newBidPrice, string newBidder, Nullable<bool> onAuction, Nullable<bool> sold, Nullable<System.DateTime> dateLoaded, Nullable<System.DateTime> dateSold, string pictureName, Nullable<float> increments, Nullable<float> reservePrice)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var roleIDParameter = roleID != null ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(string));
    
            var lotParameter = lot != null ?
                new ObjectParameter("Lot", lot) :
                new ObjectParameter("Lot", typeof(string));
    
            var itemParameter = item != null ?
                new ObjectParameter("Item", item) :
                new ObjectParameter("Item", typeof(string));
    
            var tagNrParameter = tagNr != null ?
                new ObjectParameter("TagNr", tagNr) :
                new ObjectParameter("TagNr", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(string));
    
            var dateMeasuredParameter = dateMeasured != null ?
                new ObjectParameter("DateMeasured", dateMeasured) :
                new ObjectParameter("DateMeasured", typeof(string));
    
            var hornLengthParameter = hornLength != null ?
                new ObjectParameter("HornLength", hornLength) :
                new ObjectParameter("HornLength", typeof(string));
    
            var tipToTipParameter = tipToTip != null ?
                new ObjectParameter("TipToTip", tipToTip) :
                new ObjectParameter("TipToTip", typeof(string));
    
            var otherInfoParameter = otherInfo != null ?
                new ObjectParameter("OtherInfo", otherInfo) :
                new ObjectParameter("OtherInfo", typeof(string));
    
            var dateAvailableParameter = dateAvailable != null ?
                new ObjectParameter("DateAvailable", dateAvailable) :
                new ObjectParameter("DateAvailable", typeof(string));
    
            var maleParameter = male.HasValue ?
                new ObjectParameter("Male", male) :
                new ObjectParameter("Male", typeof(int));
    
            var femaleParameter = female.HasValue ?
                new ObjectParameter("Female", female) :
                new ObjectParameter("Female", typeof(int));
    
            var youngParameter = young.HasValue ?
                new ObjectParameter("Young", young) :
                new ObjectParameter("Young", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(float));
    
            var quantity_LotParameter = quantity_Lot != null ?
                new ObjectParameter("Quantity_Lot", quantity_Lot) :
                new ObjectParameter("Quantity_Lot", typeof(string));
    
            var sellerParameter = seller != null ?
                new ObjectParameter("Seller", seller) :
                new ObjectParameter("Seller", typeof(string));
    
            var bidderParameter = bidder != null ?
                new ObjectParameter("Bidder", bidder) :
                new ObjectParameter("Bidder", typeof(string));
    
            var biddingPriceParameter = biddingPrice.HasValue ?
                new ObjectParameter("BiddingPrice", biddingPrice) :
                new ObjectParameter("BiddingPrice", typeof(float));
    
            var bidDateTimeParameter = bidDateTime.HasValue ?
                new ObjectParameter("BidDateTime", bidDateTime) :
                new ObjectParameter("BidDateTime", typeof(System.DateTime));
    
            var bidTotalPriceParameter = bidTotalPrice.HasValue ?
                new ObjectParameter("BidTotalPrice", bidTotalPrice) :
                new ObjectParameter("BidTotalPrice", typeof(float));
    
            var newBidPriceParameter = newBidPrice.HasValue ?
                new ObjectParameter("NewBidPrice", newBidPrice) :
                new ObjectParameter("NewBidPrice", typeof(float));
    
            var newBidderParameter = newBidder != null ?
                new ObjectParameter("NewBidder", newBidder) :
                new ObjectParameter("NewBidder", typeof(string));
    
            var onAuctionParameter = onAuction.HasValue ?
                new ObjectParameter("OnAuction", onAuction) :
                new ObjectParameter("OnAuction", typeof(bool));
    
            var soldParameter = sold.HasValue ?
                new ObjectParameter("Sold", sold) :
                new ObjectParameter("Sold", typeof(bool));
    
            var dateLoadedParameter = dateLoaded.HasValue ?
                new ObjectParameter("DateLoaded", dateLoaded) :
                new ObjectParameter("DateLoaded", typeof(System.DateTime));
    
            var dateSoldParameter = dateSold.HasValue ?
                new ObjectParameter("DateSold", dateSold) :
                new ObjectParameter("DateSold", typeof(System.DateTime));
    
            var pictureNameParameter = pictureName != null ?
                new ObjectParameter("PictureName", pictureName) :
                new ObjectParameter("PictureName", typeof(string));
    
            var incrementsParameter = increments.HasValue ?
                new ObjectParameter("Increments", increments) :
                new ObjectParameter("Increments", typeof(float));
    
            var reservePriceParameter = reservePrice.HasValue ?
                new ObjectParameter("ReservePrice", reservePrice) :
                new ObjectParameter("ReservePrice", typeof(float));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateRoll", iDParameter, roleIDParameter, lotParameter, itemParameter, tagNrParameter, ageParameter, dateMeasuredParameter, hornLengthParameter, tipToTipParameter, otherInfoParameter, dateAvailableParameter, maleParameter, femaleParameter, youngParameter, quantityParameter, quantity_LotParameter, sellerParameter, bidderParameter, biddingPriceParameter, bidDateTimeParameter, bidTotalPriceParameter, newBidPriceParameter, newBidderParameter, onAuctionParameter, soldParameter, dateLoadedParameter, dateSoldParameter, pictureNameParameter, incrementsParameter, reservePriceParameter);
        }
    
        public virtual int UpdateBidTimeClose(Nullable<int> iD, Nullable<System.DateTime> dateTimeClose)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var dateTimeCloseParameter = dateTimeClose.HasValue ?
                new ObjectParameter("DateTimeClose", dateTimeClose) :
                new ObjectParameter("DateTimeClose", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBidTimeClose", iDParameter, dateTimeCloseParameter);
        }
    
        public virtual int AddBidHistory(Nullable<int> linkID, Nullable<int> rollId, string lot, Nullable<int> sellerId, Nullable<int> buyerId, Nullable<decimal> biddingPrice, Nullable<decimal> bidTotalPrice, Nullable<System.DateTime> dateTimeBid, Nullable<int> userID)
        {
            var linkIDParameter = linkID.HasValue ?
                new ObjectParameter("LinkID", linkID) :
                new ObjectParameter("LinkID", typeof(int));
    
            var rollIdParameter = rollId.HasValue ?
                new ObjectParameter("RollId", rollId) :
                new ObjectParameter("RollId", typeof(int));
    
            var lotParameter = lot != null ?
                new ObjectParameter("Lot", lot) :
                new ObjectParameter("Lot", typeof(string));
    
            var sellerIdParameter = sellerId.HasValue ?
                new ObjectParameter("SellerId", sellerId) :
                new ObjectParameter("SellerId", typeof(int));
    
            var buyerIdParameter = buyerId.HasValue ?
                new ObjectParameter("BuyerId", buyerId) :
                new ObjectParameter("BuyerId", typeof(int));
    
            var biddingPriceParameter = biddingPrice.HasValue ?
                new ObjectParameter("BiddingPrice", biddingPrice) :
                new ObjectParameter("BiddingPrice", typeof(decimal));
    
            var bidTotalPriceParameter = bidTotalPrice.HasValue ?
                new ObjectParameter("BidTotalPrice", bidTotalPrice) :
                new ObjectParameter("BidTotalPrice", typeof(decimal));
    
            var dateTimeBidParameter = dateTimeBid.HasValue ?
                new ObjectParameter("DateTimeBid", dateTimeBid) :
                new ObjectParameter("DateTimeBid", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddBidHistory", linkIDParameter, rollIdParameter, lotParameter, sellerIdParameter, buyerIdParameter, biddingPriceParameter, bidTotalPriceParameter, dateTimeBidParameter, userIDParameter);
        }
    
        public virtual int CustomersNumber(Nullable<int> iD, string customerNumber, string contactPerson, string eMail, string cellPhone, string phone)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var customerNumberParameter = customerNumber != null ?
                new ObjectParameter("CustomerNumber", customerNumber) :
                new ObjectParameter("CustomerNumber", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomersNumber", iDParameter, customerNumberParameter, contactPersonParameter, eMailParameter, cellPhoneParameter, phoneParameter);
        }
    
        public virtual int AddCustomerNum(string companyName, string customerNumber, string contactPerson, string eMail, string cellPhone, string phone)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var customerNumberParameter = customerNumber != null ?
                new ObjectParameter("CustomerNumber", customerNumber) :
                new ObjectParameter("CustomerNumber", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("eMail", eMail) :
                new ObjectParameter("eMail", typeof(string));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCustomerNum", companyNameParameter, customerNumberParameter, contactPersonParameter, eMailParameter, cellPhoneParameter, phoneParameter);
        }
    }
}
